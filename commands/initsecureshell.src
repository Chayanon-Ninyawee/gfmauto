initsecureshell = {}
initsecureshell.cmd = "initsecureshell"
initsecureshell.alias = "iss"
initsecureshell.args = "(--noCorruptLog) [-h, -s, -p] (target_ip) (target_root_password) (target_ssh_port)"
initsecureshell.desc = "Initialize encode.src, decode.bin, and ssh in the specify computer/server"

initsecureshell.run = function(args)
    if args.len < 1 then exit("Invalid argument!")
    is_noCorruptLog = false

    args1 = args
    if args[0] == "--noCorruptLog" then
        args1 = args[1:]
        is_noCorruptLog = true
    end if

    flag = args1[0]

    shell_password_list = []
    if flag == "-h" then
        shell_password = {}
        shell_password.shell = get_shell("root", root_password)
        shell_password.password = root_password
        shell_password_list.push(shell_password)
    else if flag == "-s" then
        if args1.len < 3 then exit("Example: gfm "+initsecureshell.cmd+" -s 127.0.0.1 12345678 22")
        target_ip = args1[1]
        root_password = args1[2]
        ssh_port = 22; if args1.len >= 4 then ssh_port = args1[3]

        shell = get_shell.connect_service(target_ip, ssh_port, "root", root_password)
        if shell == null then exit("Can't connect to that server/computer! Maybe secure shell is already setup?")

        shell_password = {}
        shell_password.shell = shell
        shell_password.password = root_password
        shell_password_list.push(shell_password)
    else if flag == "-p" then
        proxy_server_list = get_proxy_server_list

        if not proxy_server_list.len == 0 then
            for i in range(0, proxy_server_list.len-1)
                proxy_server = proxy_server_list[i]
                if not proxy_server.key == null then continue

                shell = get_shell.connect_service(proxy_server.ip, proxy_server.ssh_port, "root", proxy_server.password)
                if shell == null then exit("[gfm] Error: Can't connect to proxy server: "+proxy_server)

                shell_password = {}
                shell_password.shell = shell
                shell_password.password = proxy_server.password
                shell_password_list.push(shell_password)

                proxy_server.key = encryption_key
                proxy_server_list[i] = proxy_server
            end for
        end if
        set_proxy_server_list(proxy_server_list)
    else
        exit("Invalid argument!")
    end if

    for shell_password in shell_password_list
        shell = shell_password.shell
        password = shell_password.password

        install_secure_ssh(shell)
        install_secure_ssh_command(shell)
        is_ssh_encryption_enabled(shell, "true")

        if not is_noCorruptLog then launch_log_corrupter(shell, password)
    end for
end function